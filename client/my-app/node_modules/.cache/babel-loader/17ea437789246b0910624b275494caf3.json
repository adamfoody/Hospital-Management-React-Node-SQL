{"ast":null,"code":"var _jsxFileName = \"/Users/adamfoody/mwa/test/client/my-app/src/PatientTable.js\";\nimport \"./App.css\";\nimport { TableContainer, Table, Paper, TableHead, TableRow, TableCell, TableBody } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction createData(name, calories, fat, carbs, protein) {\n  return {\n    name,\n    calories,\n    fat,\n    carbs,\n    protein\n  };\n}\n\nexport default function PatientTable() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n}\n/*thoughts, why not call fetchPatientRecords in a function in the return statement, then after render the table. \nThis way we call the function and setPatients = \n\n\n\n*/\n\n_c = PatientTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"PatientTable\");","map":{"version":3,"sources":["/Users/adamfoody/mwa/test/client/my-app/src/PatientTable.js"],"names":["TableContainer","Table","Paper","TableHead","TableRow","TableCell","TableBody","createData","name","calories","fat","carbs","protein","PatientTable"],"mappings":";AAAA,OAAO,WAAP;AAEA,SACIA,cADJ,EACoBC,KADpB,EAC2BC,KAD3B,EACkCC,SADlC,EAC6CC,QAD7C,EACuDC,SADvD,EACkEC,SADlE,QACmF,mBADnF;;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,QAA1B,EAAoCC,GAApC,EAAyCC,KAAzC,EAAgDC,OAAhD,EAAyD;AACrD,SAAO;AAAEJ,IAAAA,IAAF;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA,GAAlB;AAAuBC,IAAAA,KAAvB;AAA8BC,IAAAA;AAA9B,GAAP;AACD;;AAMH,eAAe,SAASC,YAAT,GAAwB;AACnC,sBAII;AAAA;AAAA;AAAA;AAAA,UAJJ;AAWH;AAED;AACA;AACA;AACA;AACA;AACA;;KAnBwBA,Y","sourcesContent":["import \"./App.css\";\n\nimport {\n    TableContainer, Table, Paper, TableHead, TableRow, TableCell, TableBody,} from '@material-ui/core';\nfunction createData(name, calories, fat, carbs, protein) {\n    return { name, calories, fat, carbs, protein };\n  }\n\n\n\n\n\nexport default function PatientTable() {\n    return (     \n\n\n\n        <div>\n        \n     \n                           \n\n        </div>\n    )\n}\n\n/*thoughts, why not call fetchPatientRecords in a function in the return statement, then after render the table. \nThis way we call the function and setPatients = \n\n\n\n*/\n"]},"metadata":{},"sourceType":"module"}