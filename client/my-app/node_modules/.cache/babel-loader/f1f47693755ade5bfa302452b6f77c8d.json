{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onChange\", \"PopperProps\", \"ToolbarComponent\", \"TransitionComponent\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTimePickerDefaultizedProps } from '../TimePicker/shared';\nimport TimePickerToolbar from '../TimePicker/TimePickerToolbar';\nimport DesktopWrapper from '../internal/pickers/wrappers/DesktopWrapper';\nimport Picker from '../internal/pickers/Picker/Picker';\nimport { useTimeValidation } from '../internal/pickers/hooks/useValidation';\nimport { parsePickerInputValue } from '../internal/pickers/date-utils';\nimport { KeyboardDateInput } from '../internal/pickers/KeyboardDateInput';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst valueManager = {\n  emptyValue: null,\n  parseInput: parsePickerInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a, b)\n};\n/**\n *\n * Demos:\n *\n * - [Time Picker](https://mui.com/components/time-picker/)\n *\n * API:\n *\n * - [DesktopTimePicker API](https://mui.com/api/desktop-time-picker/)\n */\n\nconst DesktopTimePicker = /*#__PURE__*/React.forwardRef(function DesktopTimePicker(inProps, ref) {\n  // TODO: TDate needs to be instantiated at every usage.\n  const props = useTimePickerDefaultizedProps(inProps, 'MuiDesktopTimePicker');\n  const validationError = useTimeValidation(props) !== null;\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(props, valueManager);\n\n  const {\n    PopperProps,\n    ToolbarComponent = TimePickerToolbar,\n    TransitionComponent\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const DateInputProps = _extends({}, inputProps, other, {\n    ref,\n    validationError\n  });\n\n  return /*#__PURE__*/_jsx(DesktopWrapper, _extends({}, wrapperProps, {\n    DateInputProps: DateInputProps,\n    KeyboardDateInputComponent: KeyboardDateInput,\n    PopperProps: PopperProps,\n    TransitionComponent: TransitionComponent,\n    children: /*#__PURE__*/_jsx(Picker, _extends({}, pickerProps, {\n      autoFocus: true,\n      toolbarTitle: props.label || props.toolbarTitle,\n      ToolbarComponent: ToolbarComponent,\n      DateInputProps: DateInputProps\n    }, other))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? DesktopTimePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default false\n   */\n  ampm: PropTypes.bool,\n\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default false\n   */\n  ampmInClock: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   */\n  components: PropTypes.shape({\n    OpenPickerIcon: PropTypes.elementType\n  }),\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * Accessible text that helps user to understand which time and view is selected.\n   * @default <TDate extends any>(\n   *   view: ClockView,\n   *   time: TDate | null,\n   *   adapter: MuiPickersAdapter<TDate>,\n   * ) =>\n   *   `Select ${view}. ${\n   *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`\n   *   }`\n   */\n  getClockLabelText: PropTypes.func,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  maxTime: PropTypes.any,\n\n  /**\n   * Min time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  minTime: PropTypes.any,\n\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * First view to show.\n   */\n  openTo: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Paper props passed down to [Paper](https://mui.com/api/paper/) component.\n   */\n  PaperProps: PropTypes.object,\n\n  /**\n   * Popper props passed down to [Popper](https://mui.com/api/popper/) component.\n   */\n  PopperProps: PropTypes.object,\n\n  /**\n   * Make picker read only.\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://mui.com/api/text-field/#textfield-api) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Dynamically check if time is disabled or not.\n   * If returns `false` appropriate time point will ot be acceptable.\n   */\n  shouldDisableTime: PropTypes.func,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   * @default TimePickerToolbar\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default 'â€“'\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select time'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * Custom component for popper [Transition](https://mui.com/components/transitions/#transitioncomponent-prop).\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n\n  /**\n   * Array of views to show.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\n} : void 0;\nexport default DesktopTimePicker;","map":{"version":3,"sources":["/Users/adamfoody/mwa/test/client/my-app/node_modules/@mui/lab/DesktopTimePicker/DesktopTimePicker.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","useTimePickerDefaultizedProps","TimePickerToolbar","DesktopWrapper","Picker","useTimeValidation","parsePickerInputValue","KeyboardDateInput","usePickerState","jsx","_jsx","valueManager","emptyValue","parseInput","areValuesEqual","utils","a","b","isEqual","DesktopTimePicker","forwardRef","inProps","ref","props","validationError","pickerProps","inputProps","wrapperProps","PopperProps","ToolbarComponent","TransitionComponent","other","DateInputProps","KeyboardDateInputComponent","children","autoFocus","toolbarTitle","label","process","env","NODE_ENV","propTypes","acceptRegex","instanceOf","RegExp","ampm","bool","ampmInClock","node","className","string","components","shape","OpenPickerIcon","elementType","disableCloseOnSelect","disabled","disableIgnoringDatePartForTimeValidation","disableMaskedInput","disableOpenPicker","getClockLabelText","func","getOpenDialogAriaText","ignoreInvalidInputs","InputAdornmentProps","object","inputFormat","InputProps","inputRef","oneOfType","current","key","number","mask","maxTime","any","minTime","minutesStep","onAccept","onChange","isRequired","onClose","onError","onOpen","onViewChange","open","OpenPickerButtonProps","openTo","oneOf","orientation","PaperProps","readOnly","renderInput","rifmFormatter","shouldDisableTime","showToolbar","toolbarFormat","toolbarPlaceholder","value","Date","views","arrayOf"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onChange\", \"PopperProps\", \"ToolbarComponent\", \"TransitionComponent\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTimePickerDefaultizedProps } from '../TimePicker/shared';\nimport TimePickerToolbar from '../TimePicker/TimePickerToolbar';\nimport DesktopWrapper from '../internal/pickers/wrappers/DesktopWrapper';\nimport Picker from '../internal/pickers/Picker/Picker';\nimport { useTimeValidation } from '../internal/pickers/hooks/useValidation';\nimport { parsePickerInputValue } from '../internal/pickers/date-utils';\nimport { KeyboardDateInput } from '../internal/pickers/KeyboardDateInput';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst valueManager = {\n  emptyValue: null,\n  parseInput: parsePickerInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a, b)\n};\n\n/**\n *\n * Demos:\n *\n * - [Time Picker](https://mui.com/components/time-picker/)\n *\n * API:\n *\n * - [DesktopTimePicker API](https://mui.com/api/desktop-time-picker/)\n */\nconst DesktopTimePicker = /*#__PURE__*/React.forwardRef(function DesktopTimePicker(inProps, ref) {\n  // TODO: TDate needs to be instantiated at every usage.\n  const props = useTimePickerDefaultizedProps(inProps, 'MuiDesktopTimePicker');\n  const validationError = useTimeValidation(props) !== null;\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(props, valueManager);\n\n  const {\n    PopperProps,\n    ToolbarComponent = TimePickerToolbar,\n    TransitionComponent\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const DateInputProps = _extends({}, inputProps, other, {\n    ref,\n    validationError\n  });\n\n  return /*#__PURE__*/_jsx(DesktopWrapper, _extends({}, wrapperProps, {\n    DateInputProps: DateInputProps,\n    KeyboardDateInputComponent: KeyboardDateInput,\n    PopperProps: PopperProps,\n    TransitionComponent: TransitionComponent,\n    children: /*#__PURE__*/_jsx(Picker, _extends({}, pickerProps, {\n      autoFocus: true,\n      toolbarTitle: props.label || props.toolbarTitle,\n      ToolbarComponent: ToolbarComponent,\n      DateInputProps: DateInputProps\n    }, other))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? DesktopTimePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default false\n   */\n  ampm: PropTypes.bool,\n\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default false\n   */\n  ampmInClock: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   */\n  components: PropTypes.shape({\n    OpenPickerIcon: PropTypes.elementType\n  }),\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * Accessible text that helps user to understand which time and view is selected.\n   * @default <TDate extends any>(\n   *   view: ClockView,\n   *   time: TDate | null,\n   *   adapter: MuiPickersAdapter<TDate>,\n   * ) =>\n   *   `Select ${view}. ${\n   *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`\n   *   }`\n   */\n  getClockLabelText: PropTypes.func,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  maxTime: PropTypes.any,\n\n  /**\n   * Min time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  minTime: PropTypes.any,\n\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * First view to show.\n   */\n  openTo: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Paper props passed down to [Paper](https://mui.com/api/paper/) component.\n   */\n  PaperProps: PropTypes.object,\n\n  /**\n   * Popper props passed down to [Popper](https://mui.com/api/popper/) component.\n   */\n  PopperProps: PropTypes.object,\n\n  /**\n   * Make picker read only.\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://mui.com/api/text-field/#textfield-api) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Dynamically check if time is disabled or not.\n   * If returns `false` appropriate time point will ot be acceptable.\n   */\n  shouldDisableTime: PropTypes.func,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   * @default TimePickerToolbar\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default 'â€“'\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select time'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * Custom component for popper [Transition](https://mui.com/components/transitions/#transitioncomponent-prop).\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n\n  /**\n   * Array of views to show.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\n} : void 0;\nexport default DesktopTimePicker;"]},"metadata":{},"sourceType":"module"}