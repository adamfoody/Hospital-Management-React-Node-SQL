{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"ToolbarComponent\", \"value\", \"onChange\", \"displayStaticWrapperAs\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDatePickerDefaultizedProps } from '../DatePicker/shared';\nimport DatePickerToolbar from '../DatePicker/DatePickerToolbar';\nimport PickerStaticWrapper from '../internal/pickers/wrappers/PickerStaticWrapper';\nimport Picker from '../internal/pickers/Picker/Picker';\nimport { useDateValidation } from '../internal/pickers/hooks/useValidation';\nimport { parsePickerInputValue } from '../internal/pickers/date-utils';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst valueManager = {\n  emptyValue: null,\n  parseInput: parsePickerInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a, b)\n};\n/**\n *\n * Demos:\n *\n * - [Date Picker](https://mui.com/components/date-picker/)\n *\n * API:\n *\n * - [StaticDatePicker API](https://mui.com/api/static-date-picker/)\n */\n\nconst StaticDatePicker = /*#__PURE__*/React.forwardRef(function StaticDatePicker(inProps, ref) {\n  // TODO: TDate needs to be instantiated at every usage.\n  const props = useDatePickerDefaultizedProps(inProps, 'MuiStaticDatePicker');\n  const validationError = useDateValidation(props) !== null;\n  const {\n    pickerProps,\n    inputProps\n  } = usePickerState(props, valueManager); // Note that we are passing down all the value without spread.\n  // It saves us >1kb gzip and make any prop available automatically on any level down.\n\n  const {\n    ToolbarComponent = DatePickerToolbar,\n    displayStaticWrapperAs = 'mobile'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const DateInputProps = _extends({}, inputProps, other, {\n    ref,\n    validationError\n  });\n\n  return /*#__PURE__*/_jsx(PickerStaticWrapper, {\n    displayStaticWrapperAs: displayStaticWrapperAs,\n    children: /*#__PURE__*/_jsx(Picker, _extends({}, pickerProps, {\n      toolbarTitle: props.label || props.toolbarTitle,\n      ToolbarComponent: ToolbarComponent,\n      DateInputProps: DateInputProps\n    }, other))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? StaticDatePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    OpenPickerIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType,\n    SwitchViewButton: PropTypes.elementType,\n    SwitchViewIcon: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Force static wrapper inner components to be rendered in mobile or desktop mode.\n   * @default 'mobile'\n   */\n  displayStaticWrapperAs: PropTypes.oneOf(['desktop', 'mobile']),\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Min selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change. @DateIOType\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Callback firing on year change @DateIOType.\n   */\n  onYearChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * First view to show.\n   */\n  openTo: PropTypes.oneOf(['day', 'month', 'year']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Make picker read only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for day. Check the [PickersDay](https://mui.com/api/pickers-day/) component.\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://mui.com/api/text-field/#textfield-api) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   * @default DatePickerToolbar\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '–'\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n\n  /**\n   * Array of views to show.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'month', 'year']).isRequired)\n} : void 0;\nexport default StaticDatePicker;","map":{"version":3,"sources":["/Users/adamfoody/mwa/test/client/my-app/node_modules/@mui/lab/StaticDatePicker/StaticDatePicker.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","useDatePickerDefaultizedProps","DatePickerToolbar","PickerStaticWrapper","Picker","useDateValidation","parsePickerInputValue","usePickerState","jsx","_jsx","valueManager","emptyValue","parseInput","areValuesEqual","utils","a","b","isEqual","StaticDatePicker","forwardRef","inProps","ref","props","validationError","pickerProps","inputProps","ToolbarComponent","displayStaticWrapperAs","other","DateInputProps","children","toolbarTitle","label","process","env","NODE_ENV","propTypes","acceptRegex","instanceOf","RegExp","allowSameDateSelection","bool","autoFocus","className","string","components","shape","LeftArrowButton","elementType","LeftArrowIcon","OpenPickerIcon","RightArrowButton","RightArrowIcon","SwitchViewButton","SwitchViewIcon","componentsProps","object","defaultCalendarMonth","any","disableCloseOnSelect","disabled","disableFuture","disableHighlightToday","disableMaskedInput","disableOpenPicker","disablePast","oneOf","getOpenDialogAriaText","func","getViewSwitchingButtonText","ignoreInvalidInputs","InputAdornmentProps","inputFormat","InputProps","inputRef","oneOfType","current","key","number","node","leftArrowButtonText","loading","mask","maxDate","minDate","onAccept","onChange","isRequired","onClose","onError","onMonthChange","onOpen","onViewChange","onYearChange","open","OpenPickerButtonProps","openTo","orientation","readOnly","reduceAnimations","renderDay","renderInput","renderLoading","rifmFormatter","rightArrowButtonText","shouldDisableDate","shouldDisableYear","showDaysOutsideCurrentMonth","showToolbar","toolbarFormat","toolbarPlaceholder","value","Date","views","arrayOf"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"ToolbarComponent\", \"value\", \"onChange\", \"displayStaticWrapperAs\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDatePickerDefaultizedProps } from '../DatePicker/shared';\nimport DatePickerToolbar from '../DatePicker/DatePickerToolbar';\nimport PickerStaticWrapper from '../internal/pickers/wrappers/PickerStaticWrapper';\nimport Picker from '../internal/pickers/Picker/Picker';\nimport { useDateValidation } from '../internal/pickers/hooks/useValidation';\nimport { parsePickerInputValue } from '../internal/pickers/date-utils';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst valueManager = {\n  emptyValue: null,\n  parseInput: parsePickerInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a, b)\n};\n\n/**\n *\n * Demos:\n *\n * - [Date Picker](https://mui.com/components/date-picker/)\n *\n * API:\n *\n * - [StaticDatePicker API](https://mui.com/api/static-date-picker/)\n */\nconst StaticDatePicker = /*#__PURE__*/React.forwardRef(function StaticDatePicker(inProps, ref) {\n  // TODO: TDate needs to be instantiated at every usage.\n  const props = useDatePickerDefaultizedProps(inProps, 'MuiStaticDatePicker');\n  const validationError = useDateValidation(props) !== null;\n  const {\n    pickerProps,\n    inputProps\n  } = usePickerState(props, valueManager); // Note that we are passing down all the value without spread.\n  // It saves us >1kb gzip and make any prop available automatically on any level down.\n\n  const {\n    ToolbarComponent = DatePickerToolbar,\n    displayStaticWrapperAs = 'mobile'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const DateInputProps = _extends({}, inputProps, other, {\n    ref,\n    validationError\n  });\n\n  return /*#__PURE__*/_jsx(PickerStaticWrapper, {\n    displayStaticWrapperAs: displayStaticWrapperAs,\n    children: /*#__PURE__*/_jsx(Picker, _extends({}, pickerProps, {\n      toolbarTitle: props.label || props.toolbarTitle,\n      ToolbarComponent: ToolbarComponent,\n      DateInputProps: DateInputProps\n    }, other))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? StaticDatePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    OpenPickerIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType,\n    SwitchViewButton: PropTypes.elementType,\n    SwitchViewIcon: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Force static wrapper inner components to be rendered in mobile or desktop mode.\n   * @default 'mobile'\n   */\n  displayStaticWrapperAs: PropTypes.oneOf(['desktop', 'mobile']),\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Min selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change. @DateIOType\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Callback firing on year change @DateIOType.\n   */\n  onYearChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * First view to show.\n   */\n  openTo: PropTypes.oneOf(['day', 'month', 'year']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Make picker read only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for day. Check the [PickersDay](https://mui.com/api/pickers-day/) component.\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://mui.com/api/text-field/#textfield-api) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   * @default DatePickerToolbar\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '–'\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n\n  /**\n   * Array of views to show.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'month', 'year']).isRequired)\n} : void 0;\nexport default StaticDatePicker;"]},"metadata":{},"sourceType":"module"}