{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"calendars\", \"displayStaticWrapperAs\", \"value\", \"onChange\", \"mask\", \"startText\", \"endText\", \"inputFormat\", \"minDate\", \"maxDate\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useThemeProps } from '@mui/material/styles';\nimport PickerStaticWrapper from '../internal/pickers/wrappers/PickerStaticWrapper';\nimport { useDefaultDates, useUtils } from '../internal/pickers/hooks/useUtils';\nimport { useDateRangeValidation } from '../internal/pickers/hooks/useValidation';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { DateRangePickerView } from '../DateRangePicker/DateRangePickerView';\nimport { parseRangeInputValue } from '../internal/pickers/date-utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst rangePickerValueManager = {\n  emptyValue: [null, null],\n  parseInput: parseRangeInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a[0], b[0]) && utils.isEqual(a[1], b[1])\n};\n/**\n *\n * Demos:\n *\n * - [Date Range Picker](https://mui.com/components/date-range-picker/)\n *\n * API:\n *\n * - [StaticDateRangePicker API](https://mui.com/api/static-date-range-picker/)\n */\n\nconst StaticDateRangePicker = /*#__PURE__*/React.forwardRef(function StaticDateRangePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiStaticDateRangePicker'\n  });\n\n  const {\n    calendars = 2,\n    displayStaticWrapperAs = 'mobile',\n    value,\n    onChange,\n    mask = '__/__/____',\n    startText = 'Start',\n    endText = 'End',\n    inputFormat: passedInputFormat,\n    minDate: minDateProp,\n    maxDate: maxDateProp\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const utils = useUtils();\n  const defaultDates = useDefaultDates();\n  const minDate = minDateProp != null ? minDateProp : defaultDates.minDate;\n  const maxDate = maxDateProp != null ? maxDateProp : defaultDates.maxDate;\n  const [currentlySelectingRangeEnd, setCurrentlySelectingRangeEnd] = React.useState('start');\n\n  const pickerStateProps = _extends({}, other, {\n    value,\n    onChange\n  });\n\n  const restProps = _extends({}, other, {\n    minDate,\n    maxDate\n  });\n\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(pickerStateProps, rangePickerValueManager);\n  const validationError = useDateRangeValidation(props);\n\n  const DateInputProps = _extends({}, inputProps, restProps, {\n    currentlySelectingRangeEnd,\n    inputFormat: passedInputFormat || utils.formats.keyboardDate,\n    setCurrentlySelectingRangeEnd,\n    startText,\n    endText,\n    mask,\n    validationError,\n    ref\n  });\n\n  return /*#__PURE__*/_jsx(PickerStaticWrapper, {\n    displayStaticWrapperAs: displayStaticWrapperAs,\n    children: /*#__PURE__*/_jsx(DateRangePickerView, _extends({\n      open: wrapperProps.open,\n      DateInputProps: DateInputProps,\n      calendars: calendars,\n      currentlySelectingRangeEnd: currentlySelectingRangeEnd,\n      setCurrentlySelectingRangeEnd: setCurrentlySelectingRangeEnd,\n      startText: startText,\n      endText: endText\n    }, pickerProps, restProps))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? StaticDateRangePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * The number of calendars that render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    OpenPickerIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType,\n    SwitchViewButton: PropTypes.elementType,\n    SwitchViewIcon: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Force static wrapper inner components to be rendered in mobile or desktop mode.\n   * @default 'mobile'\n   */\n  displayStaticWrapperAs: PropTypes.oneOf(['desktop', 'mobile']),\n\n  /**\n   * Text for end input label and toolbar placeholder.\n   * @default 'End'\n   */\n  endText: PropTypes.node,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   * @default '__/__/____'\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Min selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date range) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change. @DateIOType\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Make picker read only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for `<DateRangePicker />` days. @DateIOType\n   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://mui.com/api/text-field/#textfield-api),\n   * that you need to forward to the range start/end inputs respectively.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example\n   * ```jsx\n   * <DateRangePicker\n   *  renderInput={(startProps, endProps) => (\n   *   <React.Fragment>\n   *     <TextField {...startProps} />\n   *     <Box sx={{ mx: 2 }}> to </Box>\n   *     <TextField {...endProps} />\n   *   </React.Fragment>;\n   *  )}\n   * />\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Text for start input label and toolbar placeholder.\n   * @default 'Start'\n   */\n  startText: PropTypes.node,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '–'\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date range'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * The value of the date range picker.\n   */\n  value: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string])).isRequired\n} : void 0;\nexport default StaticDateRangePicker;","map":{"version":3,"sources":["/Users/adamfoody/mwa/test/client/my-app/node_modules/@mui/lab/StaticDateRangePicker/StaticDateRangePicker.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","useThemeProps","PickerStaticWrapper","useDefaultDates","useUtils","useDateRangeValidation","usePickerState","DateRangePickerView","parseRangeInputValue","jsx","_jsx","rangePickerValueManager","emptyValue","parseInput","areValuesEqual","utils","a","b","isEqual","StaticDateRangePicker","forwardRef","inProps","ref","props","name","calendars","displayStaticWrapperAs","value","onChange","mask","startText","endText","inputFormat","passedInputFormat","minDate","minDateProp","maxDate","maxDateProp","other","defaultDates","currentlySelectingRangeEnd","setCurrentlySelectingRangeEnd","useState","pickerStateProps","restProps","pickerProps","inputProps","wrapperProps","validationError","DateInputProps","formats","keyboardDate","children","open","process","env","NODE_ENV","propTypes","acceptRegex","instanceOf","RegExp","allowSameDateSelection","bool","autoFocus","oneOf","className","string","components","shape","LeftArrowButton","elementType","LeftArrowIcon","OpenPickerIcon","RightArrowButton","RightArrowIcon","SwitchViewButton","SwitchViewIcon","componentsProps","object","defaultCalendarMonth","any","disableAutoMonthSwitching","disableCloseOnSelect","disabled","disableFuture","disableHighlightToday","disableMaskedInput","disableOpenPicker","disablePast","node","getOpenDialogAriaText","func","getViewSwitchingButtonText","ignoreInvalidInputs","InputAdornmentProps","InputProps","inputRef","oneOfType","current","key","number","label","leftArrowButtonText","loading","onAccept","isRequired","onClose","onError","onMonthChange","onOpen","onViewChange","OpenPickerButtonProps","orientation","readOnly","reduceAnimations","renderDay","renderInput","renderLoading","rifmFormatter","rightArrowButtonText","shouldDisableDate","shouldDisableYear","showDaysOutsideCurrentMonth","showToolbar","ToolbarComponent","toolbarFormat","toolbarPlaceholder","toolbarTitle","arrayOf","Date"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"calendars\", \"displayStaticWrapperAs\", \"value\", \"onChange\", \"mask\", \"startText\", \"endText\", \"inputFormat\", \"minDate\", \"maxDate\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useThemeProps } from '@mui/material/styles';\nimport PickerStaticWrapper from '../internal/pickers/wrappers/PickerStaticWrapper';\nimport { useDefaultDates, useUtils } from '../internal/pickers/hooks/useUtils';\nimport { useDateRangeValidation } from '../internal/pickers/hooks/useValidation';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { DateRangePickerView } from '../DateRangePicker/DateRangePickerView';\nimport { parseRangeInputValue } from '../internal/pickers/date-utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst rangePickerValueManager = {\n  emptyValue: [null, null],\n  parseInput: parseRangeInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a[0], b[0]) && utils.isEqual(a[1], b[1])\n};\n\n/**\n *\n * Demos:\n *\n * - [Date Range Picker](https://mui.com/components/date-range-picker/)\n *\n * API:\n *\n * - [StaticDateRangePicker API](https://mui.com/api/static-date-range-picker/)\n */\nconst StaticDateRangePicker = /*#__PURE__*/React.forwardRef(function StaticDateRangePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiStaticDateRangePicker'\n  });\n\n  const {\n    calendars = 2,\n    displayStaticWrapperAs = 'mobile',\n    value,\n    onChange,\n    mask = '__/__/____',\n    startText = 'Start',\n    endText = 'End',\n    inputFormat: passedInputFormat,\n    minDate: minDateProp,\n    maxDate: maxDateProp\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const utils = useUtils();\n  const defaultDates = useDefaultDates();\n  const minDate = minDateProp != null ? minDateProp : defaultDates.minDate;\n  const maxDate = maxDateProp != null ? maxDateProp : defaultDates.maxDate;\n  const [currentlySelectingRangeEnd, setCurrentlySelectingRangeEnd] = React.useState('start');\n\n  const pickerStateProps = _extends({}, other, {\n    value,\n    onChange\n  });\n\n  const restProps = _extends({}, other, {\n    minDate,\n    maxDate\n  });\n\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(pickerStateProps, rangePickerValueManager);\n  const validationError = useDateRangeValidation(props);\n\n  const DateInputProps = _extends({}, inputProps, restProps, {\n    currentlySelectingRangeEnd,\n    inputFormat: passedInputFormat || utils.formats.keyboardDate,\n    setCurrentlySelectingRangeEnd,\n    startText,\n    endText,\n    mask,\n    validationError,\n    ref\n  });\n\n  return /*#__PURE__*/_jsx(PickerStaticWrapper, {\n    displayStaticWrapperAs: displayStaticWrapperAs,\n    children: /*#__PURE__*/_jsx(DateRangePickerView, _extends({\n      open: wrapperProps.open,\n      DateInputProps: DateInputProps,\n      calendars: calendars,\n      currentlySelectingRangeEnd: currentlySelectingRangeEnd,\n      setCurrentlySelectingRangeEnd: setCurrentlySelectingRangeEnd,\n      startText: startText,\n      endText: endText\n    }, pickerProps, restProps))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? StaticDateRangePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * The number of calendars that render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    OpenPickerIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType,\n    SwitchViewButton: PropTypes.elementType,\n    SwitchViewIcon: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Force static wrapper inner components to be rendered in mobile or desktop mode.\n   * @default 'mobile'\n   */\n  displayStaticWrapperAs: PropTypes.oneOf(['desktop', 'mobile']),\n\n  /**\n   * Text for end input label and toolbar placeholder.\n   * @default 'End'\n   */\n  endText: PropTypes.node,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   * @default '__/__/____'\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Min selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date range) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change. @DateIOType\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Make picker read only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for `<DateRangePicker />` days. @DateIOType\n   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://mui.com/api/text-field/#textfield-api),\n   * that you need to forward to the range start/end inputs respectively.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example\n   * ```jsx\n   * <DateRangePicker\n   *  renderInput={(startProps, endProps) => (\n   *   <React.Fragment>\n   *     <TextField {...startProps} />\n   *     <Box sx={{ mx: 2 }}> to </Box>\n   *     <TextField {...endProps} />\n   *   </React.Fragment>;\n   *  )}\n   * />\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Text for start input label and toolbar placeholder.\n   * @default 'Start'\n   */\n  startText: PropTypes.node,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '–'\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date range'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * The value of the date range picker.\n   */\n  value: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string])).isRequired\n} : void 0;\nexport default StaticDateRangePicker;"]},"metadata":{},"sourceType":"module"}